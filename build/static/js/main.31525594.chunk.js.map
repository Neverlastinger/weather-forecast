{"version":3,"sources":["js/store/reducers/forecast.js","js/store/actions/actionTypes.js","js/store/configureStore.js","js/components/CityInput.js","js/components/Day.js","js/components/DayList.js","js/components/Forecast.js","js/components/Message.js","js/network/api.js","js/components/App.js","js/store/actions/actions.js","js/components/Root.js","index.js"],"names":["daysOfWeek","initialState","city","days","getTemperature","daysOffset","data","Math","round","list","main","temp","getDay","Date","dt","forecast","state","arguments","length","undefined","action","type","Object","objectSpread","name","Array","from","keys","map","dayOffset","temperature","day","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","configureStore","createStore","applyMiddleware","thunkMiddleware","CityInput","props","react_default","a","createElement","className","placeholder","Day","_ref","connect","i","components_Day","key","Forecast","components_DayList","api","getForecastByCoords","params","url","URL","concat","lat","lon","appid","search","URLSearchParams","fetch","then","response","ok","json","Error","App","_this","this","navigator","geolocation","getCurrentPosition","position","onGeolocationRetrieved","coords","latitude","long","alert","components_CityInput","components_Message","components_Forecast","Component","dispatch","requestForecastByCoords","console","error","fetchForecastByCoords","store","Root","es","components_App","ReactDOM","render","components_Root","document","getElementById"],"mappings":"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","file":"static/js/main.31525594.chunk.js","sourcesContent":["import { SET_FORECAST } from '../actions/actionTypes';\r\n\r\nconst daysOfWeek = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\nconst forecastDays = 5;\r\nconst forecastsPerDay = 8;\r\n\r\nconst initialState = {\r\n\tcity: null,\r\n\tdays: []\r\n}\r\n\r\nconst forecast = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase SET_FORECAST:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcity: action.data.city.name,\r\n\t\t\t\tdays: Array.from(Array(forecastDays).keys()).map((dayOffset) => ({\r\n\t\t\t\t\ttemperature: getTemperature(dayOffset, action.data),\r\n\t\t\t\t\tday: getDay(dayOffset, action.data)\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\nconst kelvinToCelsius = (kelvin) => (\r\n\tkelvin - 273.15\r\n);\r\n\r\nconst getTemperature = (daysOffset, data) => (\r\n\tMath.round(kelvinToCelsius(data.list[daysOffset * forecastsPerDay].main.temp))\r\n);\r\n\r\nconst getDay = (daysOffset, data) => (\r\n\tdaysOfWeek[new Date(data.list[daysOffset * forecastsPerDay].dt * 1000).getDay()]\r\n);\r\n\r\nexport default forecast;\r\n","export const REQUEST_FORECAST_BY_COORDS = 'REQUEST_FORECAST_BY_COORDS';\r\nexport const SET_FORECAST = 'SET_FORECAST';\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport forecast from './reducers/forecast';\r\n\r\n// https://github.com/zalmoxisus/redux-devtools-extension\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst rootReducer = combineReducers({\r\n\tforecast\r\n});\r\n\r\nconst configureStore = () => (\r\n\tcreateStore(\r\n\t    rootReducer,\r\n\t    {},\r\n\t    composeEnhancers(\r\n\t        applyMiddleware(thunkMiddleware)\r\n\t    )\r\n\t)\r\n);\r\n\r\nexport default configureStore;\r\n","import React from 'react';\n\nconst CityInput = props => (\n\t<div className=\"input\">\n\t\t<input type=\"text\" placeholder=\"Sofia,bg / London,uk / Singapore,sg / ...\" />\n\t</div>\n);\n\nexport default CityInput;\n","import React from 'react';\n\nconst Day = ({ data }) => (\n\t<li>\n\t\t<div className=\"header\">{data.day}</div>\n\t\t<div className=\"content\">{data.temperature}Â° C</div>\n\t</li>\n);\n\nexport default Day;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Day from './Day';\n\nlet DayList = ({ days }) => (\n\t<ul>\n\t\t{days.map((day, i) => (\n\t\t\t<Day data={day} key={i} />\n\t\t))}\n\t</ul>\n);\n\nexport default connect(\n\t(state) => ({\n\t\tdays: state.forecast.days\n\t}),\n\tnull\n)(DayList);\n","import React from 'react';\n\nimport DayList from './DayList';\n\nconst Forecast = props => (\n\t<DayList />\n);\n\nexport default Forecast;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nlet Message = ({ city }) => (\n\t<div className=\"message\">\n\t\tShowing a forecast for <strong>{city || '...'}</strong>\n\t</div>\n);\n\n\nexport default connect(\n\t(state) => ({\n\t\tcity: state.forecast.city\n\t}),\n\tnull\n)(Message);\n","// *************************\r\n// Network functionality. Uses Fetch API.\r\n// *************************\r\n\r\nconst _url = 'https://api.openweathermap.org/data/2.5/';\r\nconst appId = '7d55c4d6a93e6feeca80fb7e60445421';\r\n\r\nconst api = {\r\n    getForecastByCoords: (params) => {\r\n\r\n\t\tvar url = new URL(`${_url}forecast`)\r\n\t\tvar params = { lat: 42.6977, lon: 23.3219, appid: appId };\r\n\t\turl.search = new URLSearchParams(params)\r\n\r\n\t\treturn fetch(url).then(function (response) {\r\n\t        if(response.ok) {\r\n\t            return response.json().then((response) => response);\r\n\t        } else {\r\n\t            throw new Error('Network Error');\r\n\t        }\r\n\t    });\r\n\t}\r\n};\r\n\r\nexport default api;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CityInput from './CityInput';\nimport Forecast from './Forecast';\nimport Message from './Message';\nimport { fetchForecastByCoords } from '../store/actions/actions';\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\n\t\t\tthis.props.onGeolocationRetrieved({\n\t\t\t\tlat: position.coords.latitude,\n\t\t\t\tlon: position.coords.long\n\t\t\t});\n\t\t},\n\t\t() => {\n\t\t\talert('no position available');\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<CityInput />\n\t\t\t\t<Message />\n\t\t\t\t<Forecast />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default connect(\n\tnull,\n\t(dispatch) => ({\n\t\tonGeolocationRetrieved: (data) => dispatch(fetchForecastByCoords(data))\n\t})\n)(App);\n","import { REQUEST_FORECAST_BY_COORDS, SET_FORECAST } from './actionTypes';\r\nimport api from '../../network/api';\r\n\r\nexport const requestForecastByCoords = (data) => ({ type: REQUEST_FORECAST_BY_COORDS, data });\r\nexport const setForecast = (data) => ({ type: SET_FORECAST, data });\r\n\r\nexport const fetchForecastByCoords = (data) => (dispatch) => {\r\n\r\n    dispatch(requestForecastByCoords(data));\r\n\r\n    return api.getForecastByCoords().then((response) => {\r\n\t\tconsole.error(response);\r\n\t\tdispatch(setForecast(response));\r\n    });\r\n};\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport configureStore from '../store/configureStore';\nimport App from './App';\n\nconst store = configureStore();\n\n/**\n * Redux Root component. This is where application kicks in.\n */\nconst Root = () => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\nimport Root from './js/components/Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}