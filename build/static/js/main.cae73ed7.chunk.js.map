{"version":3,"sources":["js/store/reducers/forecast.js","js/store/actions/actionTypes.js","js/store/configureStore.js","js/components/BackButton.js","js/network/api.js","js/store/actions/actions.js","js/containers/BackButton.js","js/components/CityInput.js","js/containers/CityInput.js","js/components/DayDetails.js","js/components/Day.js","js/containers/Day.js","js/components/DayList.js","js/containers/DayList.js","js/components/Message.js","js/containers/Message.js","js/components/Loading.js","js/components/App.js","js/containers/App.js","js/components/Root.js","index.js"],"names":["daysOfWeek","initialState","city","days","getDayListData","data","Array","from","keys","map","dayOffset","temperature","getTemperature","dayName","getDay","daysOffset","Math","round","list","main","temp","Date","dt","getDayDetails","filter","item","time","dt_txt","forecast","state","arguments","length","undefined","action","type","Object","objectSpread","name","loading","_coreData","day","dayDetails","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","configureStore","createStore","applyMiddleware","thunkMiddleware","BackButton","_ref","onClick","react_default","a","createElement","className","request","url","URL","concat","params","appid","units","search","URLSearchParams","fetch","then","response","ok","json","Error","catch","err","api","getForecastByCoords","lat","lon","getForecastByCity","q","setForecast","connect","dispatch","BackButtonView","handleKeyPress","onCityEntered","e","key","target","value","CityInput","placeholder","onKeyPress","bind","alert","CityInputView","DayDetails","details","timeslot","Day","onDayClick","components_DayDetails","switchToDay","DayView","DayList","i","containers_Day","DayListView","Message","MessageView","Loading","App","render","_this","props","isLoading","components_Loading","isSingleDay","containers_BackButton","containers_CityInput","containers_Message","containers_DayList","_this2","this","navigator","geolocation","getCurrentPosition","position","onGeolocationRetrieved","coords","latitude","longitude","console","error","Component","fetchForecastByCoords","AppView","store","Root","es","containers_App","ReactDOM","components_Root","document","getElementById"],"mappings":"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","file":"static/js/main.cae73ed7.chunk.js","sourcesContent":["// ************************************\r\n// Forecast Reducer\r\n// ************************************\r\n\r\nimport { SET_FORECAST, SWITCH_TO_DAY, SWITCH_TO_FULL_FORECAST, SET_LOADING, REMOVE_LOADING } from '../actions/actionTypes';\r\n\r\nconst daysOfWeek = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\nconst numberOfDays = 5;\r\nconst forecastsPerDay = 8;\r\n\r\nconst initialState = {\r\n\tcity: null,\r\n\tdays: []\r\n}\r\n\r\n/**\r\n * Forecast Reducer. Handles state changes related to the 5 day forecast or a single day forecast. \r\n * \r\n * @param  {Object} state: previous state\r\n * @param  {Object} action: action to be performed\r\n * @return {Object} nextState\r\n */\r\nconst forecast = (state = initialState, action) => {\r\n\t\r\n\tswitch (action.type) {\r\n\r\n\t\tcase SET_FORECAST:\r\n\t\t\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcity: action.data.city.name,\r\n\t\t\t\tdays: getDayListData(action.data),\r\n\t\t\t\tloading: false,\r\n\t\t\t\t_coreData: action.data\r\n\t\t\t}\r\n\t\t\t\r\n\t\tcase SWITCH_TO_DAY: \r\n\t\t\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdays: [{\r\n\t\t\t\t\ttemperature: getTemperature(action.day.dayOffset, state._coreData),\r\n\t\t\t\t\tdayName: getDay(action.day.dayOffset, state._coreData),\r\n\t\t\t\t\tdayOffset: action.day.dayOffset\r\n\t\t\t\t}],\r\n\t\t\t\tdayDetails: getDayDetails(action.day.dayName, state._coreData)\r\n\t\t\t}\r\n\t\t\t\r\n\t\tcase SWITCH_TO_FULL_FORECAST: \r\n\t\t\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdayDetails: null,\r\n\t\t\t\tdays: getDayListData(state._coreData),\r\n\t\t\t\tloading: false\r\n\t\t\t}\r\n\t\t\t\r\n\t\tcase SET_LOADING:\r\n\t\t\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true\r\n\t\t\t}\r\n\t\t\t\r\n\t\tcase REMOVE_LOADING:\r\n\t\t\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: false\r\n\t\t\t}\r\n\t\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns forecast data for each day by the given full openweathermap api data.\r\n * \r\n * @param  {Object} data: openweathermap api data\r\n * @return {Array} result: formatted array with necessary data\r\n */\r\nconst getDayListData = (data) => (\r\n\tArray.from(Array(numberOfDays).keys()).map((dayOffset) => ({\r\n\t\ttemperature: getTemperature(dayOffset, data),\r\n\t\tdayName: getDay(dayOffset, data),\r\n\t\tdayOffset\r\n\t}))\r\n);\r\n\r\n/**\r\n * Returns temperature for a given day based on the data received from the openweathermap api.\r\n * \r\n * @param  {Number} daysOffset: 0-4: days offset from now\r\n * @param  {Object} data: openweathermap api data\r\n * @return {Number} result: temperature in Celsius\r\n */\r\nconst getTemperature = (daysOffset, data) => (\r\n\tMath.round(data.list[daysOffset * forecastsPerDay].main.temp)\r\n);\r\n\r\n/**\r\n * Returns the day of the week for the given day and openweathermap api data. \r\n * \r\n * @param  {Number} daysOffset: 0-4: days offset from now\r\n * @param  {Object} data: openweathermap api data\r\n * @return {String} result: day of the week (Monday, Tuesday, etc)\r\n */\r\nconst getDay = (daysOffset, data) => (\r\n\tdaysOfWeek[new Date(data.list[daysOffset * forecastsPerDay].dt * 1000).getDay()]\r\n);\r\n\r\n/**\r\n * Returns detailed info about a particular day. \r\n * \r\n * @param  {String} dayName: day of the week (Monday, Tuesday, etc)\r\n * @param  {[type]} data: existing openweathermap api data\r\n * @return {[type]} result: detailed info about the given day\r\n */\r\nconst getDayDetails = (dayName, data) => {\r\n\t\r\n\tconst dayData = data.list.filter((item) => (\r\n\t\tdaysOfWeek[new Date(item.dt * 1000).getDay()] === dayName\r\n\t));\r\n\t\r\n\treturn dayData.map((item) => ({\r\n\t\ttime: item.dt_txt,\r\n\t\ttemperature: item.main.temp\r\n\t}));\r\n}\r\n\r\nexport default forecast;\r\n","// ************************************\r\n// This file contains all action types\r\n// ************************************\r\n\r\nexport const SET_FORECAST = 'SET_FORECAST';\r\nexport const SWITCH_TO_DAY = 'SWITCH_TO_DAY';\r\nexport const SWITCH_TO_FULL_FORECAST = 'SWITCH_TO_FULL_FORECAST';\r\nexport const SET_LOADING = 'SET_LOADING';\r\nexport const REMOVE_LOADING = 'REMOVE_LOADING';","// ************************************\r\n// This file configures the Redux Store\r\n// https://redux.js.org/api/store\r\n// ************************************\r\n\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport forecast from './reducers/forecast';\r\n\r\n// https://github.com/zalmoxisus/redux-devtools-extension\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst rootReducer = combineReducers({\r\n\tforecast\r\n});\r\n\r\nconst configureStore = () => (\r\n\tcreateStore(\r\n\t    rootReducer,\r\n\t    {},\r\n\t    composeEnhancers(\r\n\t        applyMiddleware(thunkMiddleware)\r\n\t    )\r\n\t)\r\n);\r\n\r\nexport default configureStore;\r\n","import React from 'react';\n\n/**\n * Represents the back button. Returns the user to the full 5 day forecast. \n * \n * @param {Object} props:\n * \t\t\t\t\t\t- onClick: callback, executed when the component is clicked.\n */\nconst BackButton = ({ onClick }) => (\n\t<div className=\"back-button\" onClick={onClick}>Go Back to the full 5 day forecast</div>\n);\n\nexport default BackButton;\n","// **************************************\r\n// Network functionality. Uses Fetch API.\r\n// **************************************\r\n\r\nconst baseUrl = 'https://api.openweathermap.org/data/2.5/';\r\nconst appId = '7d55c4d6a93e6feeca80fb7e60445421';\r\n\r\n/**\r\n * Sends a fetch request. \r\n * \r\n * @param  {String} action: url plug\r\n * @param  {[type]} data: GET params\r\n */\r\nconst request = ({ action, data }) => {\r\n\t\r\n\tvar url = new URL(`${baseUrl}${action}`);\r\n\tvar params = {\r\n\t\t...data,\r\n\t\tappid: appId, \r\n\t\tunits: 'metric' \r\n\t};\r\n\turl.search = new URLSearchParams(params)\r\n\r\n\treturn fetch(url).then((response) => {\r\n\t\tif(response.ok) {\r\n\t\t\treturn response.json().then((response) => response);\r\n\t\t} else {\r\n\t\t\tthrow new Error('Network Error');\r\n\t\t}\r\n\t}).catch((err) => {\r\n\t\tthrow new Error('Network Error');\r\n\t});\r\n}\r\n\r\n/**\r\n * An object containing all Network methods. \r\n */\r\nconst api = {\r\n    getForecastByCoords: (params) => ( \r\n\t\trequest({ \r\n\t\t\taction: 'forecast', \r\n\t\t\tdata: { \r\n\t\t\t\tlat: params.lat, \r\n\t\t\t\tlon: params.lon \r\n\t\t\t} \r\n\t\t})\r\n\t),\r\n\t\r\n\tgetForecastByCity: (city) => (\r\n\t\trequest({ \r\n\t\t\taction: 'forecast', \r\n\t\t\tdata: { \r\n\t\t\t\tq: city\r\n\t\t\t} \r\n\t\t})\r\n\t)\r\n};\r\n\r\nexport default api;\r\n","// **************************************\r\n// This file contains all action creators\r\n// **************************************\r\n\r\nimport { SET_FORECAST, SWITCH_TO_DAY, SWITCH_TO_FULL_FORECAST, SET_LOADING, REMOVE_LOADING } from './actionTypes';\r\nimport api from '../../network/api';\r\n\r\nexport const setForecast = (data) => ({ type: SET_FORECAST, data });\r\nexport const switchToDay = (day) => ({ type: SWITCH_TO_DAY, day });\r\nexport const switchToFullForecast = () => ({ type: SWITCH_TO_FULL_FORECAST });\r\nexport const setLoading = () => ({ type: SET_LOADING });\r\nexport const removeLoading = () => ({ type: REMOVE_LOADING });\r\n\r\nexport const fetchForecastByCoords = (data) => (dispatch) => {\r\n\t\r\n\tdispatch(setLoading());\r\n\t\r\n    return api.getForecastByCoords(data).then((response) => {\r\n\t\tdispatch(setForecast(response));\r\n    }).catch((err) => {\r\n\t\tdispatch(removeLoading());\r\n\t\talert(`Error fetching data by coordinates`);\r\n\t})\r\n};\r\n\r\nexport const fetchForecastByCity = (city) => (dispatch) => {\r\n\t\r\n\tdispatch(setLoading());\r\n\t\r\n    return api.getForecastByCity(city).then((response) => {\r\n\t\tdispatch(setForecast(response));\r\n    }).catch((err) => {\r\n\t\tdispatch(removeLoading());\r\n\t\talert(`Error fetching data for ${city} city`);\r\n\t})\r\n};","import { connect } from 'react-redux';\n\nimport BackButtonView from '../components/BackButton';\nimport { switchToFullForecast } from '../store/actions/actions';\n\n/**\n * Redux Container Component for the back button. \n */\nconst BackButton = connect(\n\tnull,\n\t(dispatch) => ({\n\t\tonClick: () => dispatch(switchToFullForecast())\n\t})\n)(BackButtonView);\n\nexport default BackButton\n","import React from 'react';\n\n/**\n * Represents the city search input. \n * \n * @param {Object} props:\n * \t\t\t\t\t- onCityEntered: callback, executed when the user hits the Enter key\n */\nconst CityInput = ({ onCityEntered }) => (\n\t<div className=\"input\">\n\t\t<input type=\"text\" placeholder=\"Enter a city and hit Enter\" onKeyPress={handleKeyPress.bind(null, onCityEntered)} />\n\t</div>\n);\n\nconst handleKeyPress = (onCityEntered, e) => {\n\te.key === 'Enter' && onCityEntered(e.target.value);\n}\n\nexport default CityInput;\n","import { connect } from 'react-redux';\n\nimport CityInputView from '../components/CityInput';\nimport { fetchForecastByCity } from '../store/actions/actions';\n\n/**\n * Redux Container Component for the city input field.\n */\nconst CityInput = connect(\n\tnull,\n\t(dispatch) => ({\n\t\tonCityEntered: (value) => dispatch(fetchForecastByCity(value))\n\t})\n)(CityInputView);\n\nexport default CityInput\n","import React from 'react';\n\n/**\n * Represents the detailed information about each day. \n * Contains forecast data for every 3 hours. \n * \n * @param {Array} details: detailed info about the currently selected day\n */\nconst DayDetails = ({ details }) => (\n\t\n\t<ul className=\"details\">\n\t\t{details.map((timeslot) => (\n\t\t\t<li key={timeslot.time}>\n\t\t\t\t<span>{timeslot.time}</span>\n\t\t\t\t<span>{timeslot.temperature}° C</span>\n\t\t\t</li>\n\t\t))}\n\t</ul>\n);\n\nexport default DayDetails;\n","import React from 'react';\n\nimport DayDetails from './DayDetails';\n\n/**\n * Represents a single day view. \n * \n * @param {Object} props:\n * \t\t\t\t\t\t- data: day data, containing the name of the day and temperature\n * \t\t\t\t\t\t- dayDetails: detailed info about the currently selected day\n * \t\t\t\t\t\t- onDayClick: callback, executed when a day is clicked\n */\nconst Day = ({ data, dayDetails, onDayClick }) => (\n\t\n\t<li onClick={onDayClick.bind(this, data)}>\n\t\t<div className=\"header\">{data.dayName}</div>\n\t\t{dayDetails ? \n\t\t\t<DayDetails details={dayDetails} /> :\n\t\t\t<div className=\"content\">{data.temperature}° C</div>\n\t\t}\n\t</li>\n);\n\nexport default Day;\n","import { connect } from 'react-redux';\n\nimport DayView from '../components/Day';\nimport { switchToDay } from '../store/actions/actions';\n\n/**\n * Redux Container Component for a single day. \n */\nconst Day = connect(\n\t(state) => ({\n\t\tdayDetails: state.forecast.dayDetails\n\t}),\n\t(dispatch) => ({\n\t\tonDayClick: (day) => dispatch((switchToDay(day)))\n\t})\n)(DayView);\n\nexport default Day\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Day from '../containers/Day';\n\n/**\n * Represents the list of days displayed on the main page. \n * \n * @param {Object} props:\n * \t\t\t\t\t\t- days: info about all the days\n */\nconst DayList = ({ days }) => (\n\t<ul>\n\t\t{days.map((day, i) => (\n\t\t\t<Day data={day} key={i} />\n\t\t))}\n\t</ul>\n);\n\nexport default DayList;","import { connect } from 'react-redux';\n\nimport DayListView from '../components/DayList';\n\n/**\n * Redux Container Component for the list of days.\n */\nconst DayList = connect(\n\t(state) => ({\n\t\tdays: state.forecast.days\n\t}),\n\tnull\n)(DayListView);\n\nexport default DayList\n","import React from 'react';\n\n/**\n * Represents the message displayed above the forecast.\n *\n * @param {Object} props:\n * \t\t\t\t\t\t- city: city name\n */\nconst Message = ({ city }) => (\n\t<div className=\"message\">\n\t\tShowing a forecast for <strong>{city || '...'}</strong>\n\t</div>\n);\n\nexport default Message;","import { connect } from 'react-redux';\n\nimport MessageView from '../components/Message';\n\n/**\n * Redux Container Component for the message displayed above the forecast. \n */\nconst Message = connect(\n\t(state) => ({\n\t\tcity: state.forecast.city\n\t}),\n\tnull\n)(MessageView);\n\nexport default Message;","import React from 'react';\n\n/**\n * Represents the loading state of the page. \n */\nconst Loading = () => (\n\t<div className=\"loading\">Loading...</div>\n);\n\nexport default Loading;\n","import React, { Component } from 'react';\n\nimport BackButton from '../containers/BackButton';\nimport CityInput from '../containers/CityInput';\nimport DayList from '../containers/DayList';\nimport Message from '../containers/Message';\nimport Loading from './Loading';\n\n/**\n * Main components for the Forecast Weather App. \n * Requests geolocation on init and renders the rest of the components. \n */\nexport default class App extends Component {\n\n\tcomponentDidMount() {\n\t\t\n\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\t(position) => {\n\t\t\t\tthis.props.onGeolocationRetrieved({\n\t\t\t\t\tlat: position.coords.latitude,\n\t\t\t\t\tlon: position.coords.longitude\n\t\t\t\t});\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\talert('no position available');\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t);\n\t}\n\n\trender = () => (\n\t\t<div className=\"container\">\n\t\t\t{ this.props.isLoading ? <Loading /> : null }\n\t\t\t{ this.props.isSingleDay ? <BackButton /> : <CityInput /> }\n\t\t\t<Message />\n\t\t\t<DayList />\n\t\t</div>\n\t);\n}\n","import { connect } from 'react-redux';\n\nimport AppView from '../components/App';\nimport { fetchForecastByCoords } from '../store/actions/actions';\n\n/**\n * Redux Container Component for the entire application. \n */\nconst App = connect(\n\t(state) => ({\n\t\tisSingleDay: !!state.forecast.dayDetails,\n\t\tisLoading: state.forecast.loading\n\t}),\n\t(dispatch) => ({\n\t\tonGeolocationRetrieved: (data) => dispatch(fetchForecastByCoords(data))\n\t})\n)(AppView);\n\nexport default App;","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport configureStore from '../store/configureStore';\nimport App from '../containers/App';\n\nconst store = configureStore();\n\n/**\n * Root component. This is where application kicks in.\n * Provides the Redux store to the application. \n */\nconst Root = () => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\nimport Root from './js/components/Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}